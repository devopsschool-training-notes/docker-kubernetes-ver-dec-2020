K8s
==========
Master server
-------------------------------
- API Server	-> POD -> Container -> Image -> Google Registry
- EtcD		-> POD -> Container -> Image -> Google Registry
- Controller Mgr-> POD -> Container -> Image -> Google Registry
- Schedular	-> POD -> Container -> Image -> Google Registry

- Kubelet
- Docker Engine
- Kube Proxy	-> POD -> Container -> Image -> Google Registry


Worker Server
-------------------------------
- Kubelet
- Docker Engine
- Kube Proxy	-> POD -> Container -> Image -> Google Registry

WorkStation Server
-------------------------------
- Kubectl
=============================================================================
How to setup k8s clustor?
	 - Kubeadm
		- Tool to setup a k8s clustor

==========================================
Where to Setup k8s?
------------------------
40+
	Public Cloud
		AWS	- EKS MANGED & HOSTED
		GOogle	- GKE - MANGED & HOSTED
		Azure	- AKS - MANGED & HOSTED

	Private CLoud
		Vmware
		virtualbox


	Physcial Machine Manual way - NA
	Virtual Machine Manual way
		- Kubeadm - Manual way anywhere	==========DEMO================
		- KOPS	- Manual way in Popular cloud
		- minikube - in your Laptop
		
===============================================================================
Master - 2 CPU - 4 GB - 30 GB	= CENTOS 2
WORKER - 1 CPU - 2 GB - 30 GB	= CENTOS 1
=======================================
CENTOS 1 NEEds to be Cleaned - 
Why - COZ we have used DOCKER with BRIDGE network
How??? 

$ docker rm $(docker ps -aq)
$ docker rm -f -v $(docker ps -q)
$ systemctl stop docker
$ iptables --flush
$ echo "1" >/proc/sys/net/bridge/bridge-nf-call-iptables
$ systemctl start docker && systemctl enable docker
=======================================
Master + WORKSTATION == ONE	52.66.202.148
WORKER = SECOND			65.0.185.96
==============================================================
https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/
=======================================
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.27.197:6443 --token hm6br8.ut220cqmbh0achtd \
    --discovery-token-ca-cert-hash sha256:fe104c0ea060c3a29bd120cf3af3be95a18a2b745f507e93e62a4c19fa52091e

====================================================================
13.233.190.67
==========================
- How kubectl(workstation) connect to API server?	DONE
- Validating a k8s clustor				DONE
- Concept of Namespace					DONE
- working with Namespace				DONE
- Working with POD					DONE
- How to use POD or Debug POD?
===============================================
- How kubectl(workstation) connect to API server?

kubectl
	CHECK a file "config"
	$USER_HOME/.kube

	Content of config?
	YAML
--------------------------------------
	CLUSTORS:
	- CLUSTOR1 : API SEREVER 1
	- CLUSTOR2 : API SEREVER 2
	- CLUSTOR3 : API SEREVER 3
	- CLUSTOR4 : API SEREVER 4

	USERS:
	- USER 1: CERT
	- USER 2: CERT
	- USER 3: CERT

	CONTEXTS:
	- CONTEXT 1 = CLUSTOR1 + USER 3
	- CONTEXT 2
	- CONTEXT 3

	curr-context - 

----------------------------------------------
  18  kubectl get nodes
   19  more $HOME/.kube/config
   20  clear
   21  ls
   22  clear
   23  l
   24  s
   25  ls
   26  kubectl
   27  kubectl cluster-info
   28  kubectl version
   29  kubectl config
   30  kubectl config view
   31  history
--------------------------------------------------
What do you want??? === DESIRE??
	DECLARE IN YAML
	=-==
	

   33  kubectl
   34  kubectl api-resources
   35  clear
   36  kubectl api-resources
   37  kubectl api-resources | wc -l
   38  kubectl
   39  kubectl api-versions
   40  history
================================================================
================================================================
Wat to do with API?
	CRUD

	Create
		CMD
			create
		YAML
			create -f
	Read
		CMD
			get
			describe
		YAML
	Update
		CMD
			edit
		YAML
			apply -f
	Delete
		CMD
			delete
		YAML
			delete -f


  42  kubectl get ns
   43  kubectl get pods --all-namespaces
   44  kubectl api-resources
   45  clear
   46  kubectl
   47  clear
   48  kubectl get ns
   49  kubectl describe ns kube-system
   50  kubectl -h
   51  kubectl create -h
   52  kubectl create ns -h
   53  kubectl create namespace dev
   54  kubectl create namespace qa
   55  kubectl get ns
   56  kubectl edit ns qa
   57  kubectl delete ns qa
   58  kubectl get ns

------------------------
pod.yaml
-------------------
apiVersion: v1
kind: Pod
metadata:
  name: hello-pod
  labels: 
    app: webserver
spec:
  containers:
  - name: hello-ctr
    image: nginx
    ports:
    - containerPort: 80


   60  clear
   61  kubectl create -h
   62  clear
   63  pwd
   64  cd
   65  ;s
   66  ls
   67  mkdir rajesh
   68  cd rajesh/
   69  vi pod.yaml
   70  kubectl create -f pod.yaml
   71  kubectl get pods
   72  kubectl get pods --all-namespaces
   73  clear
   74  kubectl create -f pod.yaml -n=dev
   75  kubectl get pods -n=dev
   76  kubectl get pods
   77  kubectl describe pod hello-pod -n=dev
   78  clear
   79  kubectl get pods -n=rajesh
   80  kubectl get pods -n=dev
   81  kubectl get pods -n=dev --show-loables
   82  kubectl get pods -n=dev --show-loabels
   83  kubectl get pods -n=dev --show-lables
   84  kubectl get pods -n=dev --show-labels
   85  kubectl get pods -n=dev --show-labels -o wide
   86  kubectl edit pod hello-pod -n=dev
   87  kubectl get pods -n=dev --show-labels -o wide
   88  vi pod.yaml
   89  kubectl apply -f pod.yaml -n=dev
   90  kubectl get pods -n=dev --show-labels -o wide
   91  clear
   92  kubectl get pods
   93  kubectl delete pod hello-pod
   94  kubectl delete -f pod.yaml -n=dev
   95  history


13.233.190.67
centos
centos123
=======================================
- How to use POD or Debug POD?
- How to work with ReplicationController
- Explain

-------------------------
Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes


   95  history
   96  sudo -s
   97  clear
   98  kubectl
   99  clear
  100  kubectl get pods -n=dev
  101  ls
  102  kubectl create -f pod.yaml -n=dev
  103  kubectl get pods -n=dev
  104  kubectl get pods -n=dev -o wide
  105  kubectl logs hello-pod -n=dev
  106  clear
  107  watch kubectl logs hello-pod -n=dev
  108  watch kubectl logs -h
  109  kubectl attach hello-pod -n=dev
  110  clear
  111  kubectl get pods -n=dev
  112  kubectl exec hello-pod -n=dev ls
  113  clear
  114  kubectl exec -it hello-pod -n=dev /bin/bash
  115  kubectl get pods -n=dev
  116  kubectl exec -h
  117  clear
  118  kubectl port-forward -h
  119  kubectl get pods -n=de
  120  kubectl get pods -n=dev
  121  clear
  122  kubectl port-forward pod/hello-pod 8888:80
  123  kubectl port-forward pod/hello-pod 8888:80 -n=dev
  124  kubectl port-forward -h
  125  kubectl port-forward --address 0.0.0.0 pod/hello-pod 8888:80 -n=dev
  126  clear
  127  ls
  128  kubectl get pods -n=dev
  129  kubectl cp pod.yaml hello-pod:/opt -n=dev
  130  kubectl exec hello-pod -n=dev ls /opt
  131  kubectl cp -h
  132  clear
  133  kubectl auth -h
  134  kubectl auth can-i create pods
  135  kubectl auth can-i delete pods
  136  kubectl debug -h

=========================================
- How to work with ReplicationController
===========================================
Multiple PODS
	- ReplicationController	
	- Replicassets
	- Deployment
	- DeamonSets
	- Statefulsets

====================================
ReplicationController	

- Replication: YOu can Replicate X num of PODS.
- Controller: Make sure DESIRE # of PODS == ACTUAL # of PODS	


apiVersion: v1
kind: ReplicationController
metadata:
  name: hello-rc
spec:
  replicas: 2   
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-ctr
        image: scmgalaxy/nginx-devopsschoolv1
        ports:
        - containerPort: 80


https://www.devopsschool.com/blog/kubernetes-resource-requests-and-limits-of-pod-and-container/

https://www.devopsschool.com/blog/how-to-autoscale-pods-based-on-cpu-memory-in-kubernetes/
  136  kubectl debug -h
  137  clear
  138  history
  139  clear
  140  kubectl create -h
  141  clear
  142  ls
  143  kubectl get rc
  144  kubectl get rc -n=dev
  145  vi rc.yaml
  146  kubectl create -f rc.yaml -n=dev
  147  kubectl get rc -n=dev
  148  kubectl get pods -n=dev
  149  kubectl describe rc hello-rc -n=dev
  150  clear
  151  kubectl get pods -n=dev
  152  kubectl describe pod hello-pod -n=dev
  153  kubectl get pods -n=dev
  154  kubectl describe pod hello-rc-6c782 -n=dev
  155  clear
  156  kubectl get pods -n=dev
  157  kubectl edit rc hello-rc -n=dev
  158  kubectl get pods -n=dev
  159  clear
  160  vi rc.yaml
  161  kubectl apply -f rc.yaml -n=dev
  162  kubectl get pods -n=dev
  163  clear
  164  ls
  165  kubectl scale h
  166  kubectl scale -h
  167  clear
  168  kubectl get rc
  169  kubectl get rc -n=dev
  170  kubectl scale --replicas=2 rc/hello-rc -n=dev
  171  kubectl get rc -n=dev
  172  kubectl get pods -n=dev
  173  kubectl
  174  clear
  175  ls
  176  clear
  177  ks
  178  clear
  179  lks
  180  kubectl get rc -n=dev
  181  kubectl scale --replicas=8 rc/hello-rc -n=dev
  182  kubectl get rc -n=dev
  183  clear
  184  kubectl get pods -n=dev
  185  kubectl delete pods hello-rc-6c782 hello-rc-7fd95 hello-rc-7zjfd hello-rc-99xmh hello-rc-9hbhc hello-rc-b8j8g -n=dev
  186  kubectl get pods -n=dev
  187  history


 188  clear
  189  kubectl explain pods
  190  clear
  191  kubectl explain pods.spec
  192  kubectl explain pods.spec.containers
  193  kubectl explain ns
  194  kubectl explain ns.spec
  195  kubectl explain rc
  196  kubectl explain rc.spec
  197  kubectl explain rc.spec.template
  198  kubectl explain rc.spec.template.spec
  199  history






