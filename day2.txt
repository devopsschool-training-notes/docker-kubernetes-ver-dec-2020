15.206.122.56
-------------------
How to use container?
-------------------------------------
Rule
--------------------------------------------------------------------------------------------
Physical server 		Virtual server 			Container 
is running			is running			is running	
Coz of PID 1 is running		Coz of PID 1 is running		Coz of PID 1 is running


PID 1 is SYSTEMD		PID 1 is SYSTEMD		PID 1 is ANYTHING
								java
								python
								perl
								ruby
								bash
								X
								Y
								Z
  155  docker ps
  156  docker ps -a
  157  docker start f28896e3a3dd 288c7bbd04dd
  158  docker ps -a
  159  clear
  160  docker ps
  161  docker exec f28896e3a3dd ps -eaf
  162  ps -eaf | grep jenkins.war
  163  clear
  164  ls
  165  docker ps
  166  docker exec -it f28896e3a3dd /bin/bash
  167  docker ps
  168  docker exec -it 288c7bbd04dd /bin/bash
  169  docker ps
  170  docker exec -it 288c7bbd04dd /bin/bash
  171  docker ps
  172  clear

============================================================================
run
--------------
pull -> create --> start --> BECOME CONTAINER PROCESS PID 1 AKA Attached to the container

run -d
--------------
pull -> create --> start --> DO NOT BECOME CONTAINER PROCESS PID 1 AKA  DO NOT Attached to the container

 171  docker ps
  172  clear
  173  history
  174  clear
  175  docker run jenkins
  176  docker ps -a
  177  clear
  178  clear
  179  docker run ubuntu
  180  docker images
  181  docker ps
  182  docker ps -a
  183  clear
  184  ls
  185  ls
  186  ls
  187  dir
  188  ps
  189  /bin/bash
  190  clear
  191  docker run jenkins
  192  clear
  193  docker run -d jenkins
  194  docker ps
  195  docker run -d jenkins
  196  docker ps
  197  docker run -d ubuntu
  198  docker ps -a

===============================================================
What you do with COMPUTE unit?
---------------------------------
Go Inside ---->
- exec
	Would execute an Executable INSIDE a container
	with -it && /bin/bash - You can go inside

 201  clear
  202  dcoe
  203  docker ps
  204  docker exec 9c9ba042d46a ls
  205  clear
  206  docker exec 9c9ba042d46a ps
  207  docker exec 9c9ba042d46a ps -eaf
  208  docker exec 9c9ba042d46a df -kh
  209  docker exec 9c9ba042d46a abc
  210   abvc
  217  docker ps
  218  docker exec -it 9c9ba042d46a /bin/bash


- attach
	BECOME CONTAINER PROCESS PID 1 AKA 
	Attached to the container  PID 1

How to come out of the container without exiting whre YOU ARE BASH.
-----------------------------------------------
control + P + Q


 219  clear
  220  docker ps
  221  history
  222  clear
  223  docker ps
  224  docker attach 9c9ba042d46a
  225  docker ps
  226  clear
  227  docker ps -a
  228  docker run -it ubuntu /bin/bash
  229  clear
  230  docker run -it ubuntu /bin/bash
  231  docker ps
  232  history

 230  docker run -it ubuntu /bin/bash
  231  docker ps
  232  history
  233  clear
  234  docker run -itd ubuntu /bin/bash
  235  docker run -itd ubuntu /bin/bash
  236  docker run -itd ubuntu /bin/bash
  237  docker run -itd ubuntu /bin/bash

Access from Outside ---->
------------------------------

  241  docker ps
  242  docker inspect 0bc181b7cc50 | grep ip
  243  docker inspect 0bc181b7cc50 | grep -i ip
  244  clear
  245  ping 172.17.0.2
  246  clear
  247  curl http://172.17.0.2:8080
  248  clear



docker run -d -p 8080:8080 jenkins
	         hostport:contport

docker run -d -p 8090:8080 jenkins
docker run -d jenkins


  265  docker ps -a
  266  clear
  267  docker run -d -p 8080:8080 jenkins
  268  docker run -d -p 8090:8080 jenkins
  269  docker run -d jenkins
  270  docker ps

=========================================================================
13.234.37.248
https://www.devopsschool.com/tutorial/docker/commands/index.html

cp	Copy files/folders between a container and the local filesystem


	Copy a files and folders from'
		From Host to container
		Container to Host


 277  docker run -itd ubuntu
  278  docker ps
  279  clear
  280  docker ps
  281  docker exec 1cf83d400fa6 ls /opt
  282  vi devopsschool.txt
  283  ls
  284  docker cp devopsschool.txt 1cf83d400fa6:/opt
  285  docker exec 1cf83d400fa6 ls /opt
  286  docker exec 1cf83d400fa6 more /opt/devopsschool.txt
  287  clear
  288  ls
  289  rm -rf devopsschool.txt
  290  ls
  291  docker cp 1cf83d400fa6:/opt/devopsschool.txt .
  292  ls
  293  more devopsschool.txt
===========================================

diff	Inspect changes to files or directories on a container's filesystem
		
	Since a container got created
	- using diff commands
	- you can see 
		- ANY FILES GOT CHNAGED
		- GOT ADDED
		- GOT deleted.

279  docker ps
  280  docker diff 1cf83d400fa6

===========================================
inspect	- Return low-level information on Docker objects

	used for
	- container
	- Image
	- network
	- volume

 283  docker images
  284  docker inspect jenkins
  285  clear
  286  docker ps
  287  docker inspect 1cf83d400fa6
  288  clear
  289  docker help create
  290  clear
  291  docker help run
  292  clear
  293  docker network ls
  294  docker inspect 3a7a00ee01c1
  295  clear
  296  history
  297  docker volume ls
  298  docker inspect 01e4f96f386089fceb1a78293d024e2c50f1641c920879524d90287b46281160
  299  clear
  300  history
---------------------------------------------
port	List port mappings or a specific mapping for the container

  302  docker ps
  303  docker port 1cf83d400fa6
  304  docker run -d jenkins
  305  docker ps
  306  docker port ab31b296ccbf
  307  docker run -d -p 8080:8080 jenkins
  308  docker ps
  309  docker port af5a49954881
  310  history
---------------------------------------------------------------
rename	Rename a container

 312  ls
  313  docker ps
  314  docker rename af5a49954881 dev1
  315  docker rename ab31b296ccbf dev2
  316  docker ps
  317  docker run -itd --name raju1 ubuntu
  318  clear
  319  docker ps
  320  history



Docker Commands - Monitoring Containers
=======================================================
Command	Description
logs	Fetch the logs of a container
------------------------------------------------------
	You can see logs of the PID 1

 321  clear
  322  docker ps
  323  docker logs af5a49954881
  324  clear
  325  docker ps
  326  docker logs 305b3a0ad95d
  327  docker attach 305b3a0ad95d
  328  docker logs 305b3a0ad95d



ps	List containers

stats	Display a live stream of container(s) resource usage statistics

top	Display the running processes of a container

events	Get real time events from the server


 324  clear
  325  docker ps
  326  docker logs 305b3a0ad95d
  327  docker attach 305b3a0ad95d
  328  docker logs 305b3a0ad95d
  329  history
  330  clear
  331  docker stats
  332  docker stats 305b3a0ad95d
  333  clear
  334  docker ps
  335  ps -eaf | grep docker
  336  docker top 1cf83d400fa6
  337  clear
  338  docker events
  339  docker events
  340  history





Assignment
====================================================
update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes
====================================================
docker help
docker help update
docker help wait
docker help run
docker help create

=================================================================

Docker Volume
========================
How to get container data persited BEYOND a lifecycle of Container
- Docker Volume
	is a way to attached/mount a location dir in the container....U store in a container in that dir. container is done...data would be pers* in that location.
 	- volume	/var/lib/docker/volumes		
	- mountfs	ANYWHERE in the HOST MACHINE
	- tempfs	in Memory
https://www.devopsschool.com/blog/understand-docker-volume-from-beginner-to-deep-dive-level/


 265  clear
  266  docker ps -a
  267  clear
  268  docker run -d -p 8080:8080 jenkins
  269  docker run -d -p 8090:8080 jenkins
  270  docker run -d jenkins
  271  docker ps
  272  history
  273  clear
  274  ls
  275  docker run -itd ubuntu
  276  docker run -d jenkins
  277  clear
  278  docker ps
  279  clear
  280  docker exec 1cf83d400fa6 ls /opt
  281  docker inspect 1cf83d400fa6
  282  cd /var/lib/docker/
  283  clear
  284  docker exec 1cf83d400fa6 ls /opt
  285  find . -name devopsschool.txt
  286   docker stop 1cf83d400fa6
  287  find . -name devopsschool.txt
  288   docker start 1cf83d400fa6
  289  find . -name devopsschool.txt
  290   docker stop 1cf83d400fa6
  291  clear
  292  find . -name devopsschool.txt
  293   docker rm 1cf83d400fa6
  294  find . -name devopsschool.txt
  295  pwd
  296  ls
  297  cd volumes
  298  clear
  299  ls
  300  pwd
  301  clear
  302  docker volume
  303  docker volume ls
  304  ls
  305  pwd
  306  clear
  307  ls
  308  pwd
  309  docker volume ls
  310  clear
  311  ls | wc -l
  312  ls
  313  docker run -d jenkins
  314  ls | wc -l
  315  ls
  316  clear
  317  ls
  318  docker ps -a
  319  docker stop 45e968f6a687 4ce1482c73fd 24786d296446 305b3a0ad95d af5a49954881 ab31b296ccbf ea2e66370331 c015959209f2 12bea6c28592
  320  docker rm 45e968f6a687 4ce1482c73fd 24786d296446 305b3a0ad95d af5a49954881 ab31b296ccbf ea2e66370331 c015959209f2 12bea6c28592
  321  clear
  322  docker ps -a
  323  ls
  324  cd 3252cd17ffc2bdadac185c08117c2ce22c9de083294776e04b84c62d22f07d40
  325  clear
  326  ls
  327  cd _data/
  328  ls
  329  cd ..
  330  ls
  331  cd ..
  332  clear
  333  ls
  334  docker volume ls
  335  docker volume
  336  docker volume prune
  337  clear
  338  docker volume ls
  339* l
  340  docker volume create
  341  docker volume ls
  342  ls
  343  docker volume create dev
  344  docker volume create qa
  345  ls
  346  docker volume ls
  347  clear
  348  docker volume
  349  docker volume rm dev
  350  ls
  351  docker volume rm qa
  352* l
  353  docker volume inspect 4e172d6dca0d72ee877b49a66bf8486b3ff754c9a3a5d55ecd08b09ccccb09a8
  354  clear
  355  ls
  356  docker volume create dev1
  357  docker volume create dev2
  358  ls
  359  docker run -itd -v dev1:/opt/raju1 ubuntu
  360  docker run -itd -v dev1:/opt/raju1 -v dev2:/opt/raju2 ubuntu
  361  docker ps
  362  docker exec 9d3a4260bb49 ls /opt
  363  docker exec 4b47c78c8e12 ls /opt
  364  clear
  365  docker ps
  366  docker exec 9d3a4260bb49 /opt/raju1/rajesh.txt
  367  docker exec 9d3a4260bb49 touch /opt/raju1/rajesh.txt
  368  find . -name rajesh.txt
  369  ls
  370  cd dev
  371  cd dev1
  372  ls
  373  cd _data/
  374  ls
  375  clear
  376  ls
  377  pwd
  378  touch rajesh1.txt rajesh2.txt
  379  ls
  380  docker exec 9d3a4260bb49 ls /opt/raju1
  381  docker volume la
  382  docker volume ls
  383  clear
  384  docker volume la
  385  docker volume ls
  386  cd ..
  387  ls
  388  cd ..
  389  clear
  390  ls
  391  find . -name rajesh*
  392  docker ps
  393  cd ..
  394  clear
  395  ls
  396  find . -name rajesh*
  397  docker ps
  398  docker stop 9d3a4260bb49 4b47c78c8e12
  399  find . -name rajesh*
  400  docker rm 9d3a4260bb49 4b47c78c8e12
  401  find . -name rajesh*
  402  docker volume ls
  403  clear
  404  docker run -itd -v dev1:/opt/raka ubuntu
  405  docker ps
  406  docker exec 1ec09756fc2f ls /opt/raka
  407  cleatr
  408  cd /opt/
  409  clear
  410  ls
  411  mkdir bkup
  412  cd bkup/
  413  clear
  414  pwd
  415  docker run -itd -v /opt/bkup:/opt/ramukaka ubuntu
  416  docker ps
  417  docker exec e6bc471e4946 ls /opt
  418  docker exec e6bc471e4946 touch /opt/ramukaka/rrr
  419  ls
  420  touch fffff
  421  docker exec e6bc471e4946 ls /opt/ramukaka
  422  history


Docker Networking
========================

How a container can be accessible over the network?
-------------
	Each container by default GET one NET NS
	-----------------------------------------
			ONE IP


DRIVER
	BRIDGE
	host	- Container DO NET GET ANY NET NS BUT attached to HOST NETWORK
	null    - Container DO NET GET ANY NET NS NOR attached to HOST NETWORK


  433  clear
  434  ifconfig
  435  clear
  436  docker run -itd ubuntu
  437  ifconfig
  438  docker ps
  439  docker run -itd ubuntu
  440  ifconfig
  441  clear
  442  docker network
  443  docker network ls
  444  ifconfig
  445  docker network ls
  446  docker inspect 3a7a00ee01c1
  447  clear
  448  docker network ls
  449  docker network create dev
  450  docker network create qa
  451  docker network ls
  452  docker network inspect 5345274571ee
  453  docker network inspect qa
  454  docker network ls
  455  clear
  456  docker run -itd --net=qa ubuntu
  457  docker -s
  458  clear
  459  docker ps
  460  docker inspect 3fec69118c82 | grep -i ip
  461  docker inspect 6af305ca550d | grep -i ip
  462  docker network ls
  463  docker ps
  464  docker inspect 6af305ca550d | grep -i ip
  465  docker network
  466  docker ps
  467  docker network connect 6af305ca550d dev
  468  docker network connect dev 6af305ca550d
  469  docker inspect 6af305ca550d | grep -i ip
  470  docker network ls
  471  docker network rm dev




466  docker ps
  467  docker network connect 6af305ca550d dev
  468  docker network connect dev 6af305ca550d
  469  docker inspect 6af305ca550d | grep -i ip
  470  docker network ls
  471  docker network rm dev
  472  history
  473  clear
  474  ifconfig
  475  c;lear
  476  clear
  477  docker run -itd --net=host ubuntu
  478  docker ps
  479  docker inspect 481f2caec425
  480  clear
  481  docker ps
  482  docker attach 481f2caec425
  483  ifconfig




  487  docker ps
  488  docker network ls
  489  docker run -itd --net=none ubuntu
  490  docker ps
  491  docker inspect d5592dc6fb66









